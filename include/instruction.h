#pragma once
#include <stddef.h>
#include <stdint.h>

struct instruction {
  uint16_t opcode;
  uint16_t param1;
  uint16_t param2;
};

enum instruction_opcode {
  INST_ADC,
  INST_ADD,
  INST_ADIW,
  INST_AND,
  INST_ANDI,
  INST_ASR,
  INST_BCLR,
  INST_BLD,
  INST_BRD,
  INST_BRBC,
  INST_BRBS,
  INST_BRCC,
  INST_BRCS,
  INST_BREAK,
  INST_BREQ,
  INST_BRGE,
  INST_BRHC,
  INST_BRHS,
  INST_BRID,
  INST_BRIE,
  INST_BRLT,
  INST_BRMI,
  INST_BRNE,
  INST_BRPL,
  INST_BRSH,
  INST_BRTC,
  INST_BRTS,
  INST_BRVC,
  INST_BRVS,
  INST_BSET,
  INST_BST,
  INST_CALL,
  INST_CBI,
  INST_CLC,
  INST_CLH,
  INST_CLI,
  INST_CLN,
  INST_CLR,
  INST_CLS,
  INST_CLT,
  INST_CLV,
  INST_CLZ,
  INST_COM,
  INST_CP,
  INST_CPC,
  INST_CPI,
  INST_CPSE,
  INST_DEC,
  INST_DES,
  INST_ELPM,
  INST_ELPMZ,
  INST_ELPMZP,
  INST_EOR,
  INST_FMUL,
  INST_FMULS,
  INST_FMULSU,
  INST_ICALL,
  INST_IJMP,
  INST_IN,
  INST_INC,
  INST_JMP,
  INST_LAC,
  INST_LAS,
  INST_LAT,
  INST_LD_X,
  INST_LD_XP,
  INST_LD_MX,
  INST_LD_Y,
  INST_LD_YP,
  INST_LD_MY,
  INST_LDD_YQ,
  INST_LD_Z,
  INST_LD_ZP,
  INST_LD_MZ,
  INST_LDD_ZQ,
  INST_LDI,
  INST_LDS,
  INST_LPM,
  INST_LPMZ,
  INST_LPMZP,
  INST_LSL,
  INST_LSR,
  INST_MOV,
  INST_MOVW,
  INST_MUL,
  INST_MULS,
  INST_MULSU,
  INST_NEG,
  INST_NOP,
  INST_OR,
  INST_ORI,
  INST_OUT,
  INST_POP,
  INST_PUSH,
  INST_RCALL,
  INST_RET,
  INST_RETI,
  INST_RJMP,
  INST_ROL,
  INST_ROR,
  INST_SBC,
  INST_SBCI,
  INST_SBI,
  INST_SBIC,
  INST_SBIS,
  INST_SBIW,
  INST_SBR,
  INST_SBRC,
  INST_SBRS,
  INST_SEC,
  INST_SEH,
  INST_SEI,
  INST_SEN,
  INST_SER,
  INST_SES,
  INST_SET,
  INST_SEV,
  INST_SEZ,
  INST_SLEEP,
  INST_SPM,
  INST_ST_X,
  INST_ST_XP,
  INST_ST_MX,
  INST_ST_Y,
  INST_ST_YP,
  INST_ST_MY,
  INST_STD_YQ,
  INST_ST_Z,
  INST_ST_ZP,
  INST_ST_MZ,
  INST_STD_ZQ,
  INST_STS,
  INST_SUB,
  INST_SUBI,
  INST_SWAP,
  INST_TST,
  INST_WDR,
  INST_XCH,
};

extern const char *instruction_patterns[];

typedef int (*instruction_method_t)(struct instruction instruction,
                                    uint8_t *memory, uint8_t *sreg,
                                    uint8_t **stack, uint16_t **pc,
                                    uint16_t *fmem);

extern const instruction_method_t instruction_methods[];

int instruction_pattern_match(uint16_t instruction, char *pattern);

struct instruction instruction_unmask(uint16_t instruction, char *pattern);

uint16_t instruction_mask(struct instruction instruction, char *pattern);